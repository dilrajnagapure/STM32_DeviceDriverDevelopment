
STM32_Driver_Development.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a40  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000bd4  08000bd4  00001bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000bd4  08000bd4  00001bd4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000bd4  08000bd4  00001bd4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000bd4  08000bd4  00001bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000000  08000bd4  08000bd4  00001bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000000  08000bd4  08000bd4  00001bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00001bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000000  08000bd4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08000bd4  00002038  2**0
                  ALLOC
 11 .ARM.attributes 0000002c  00000000  00000000  00001bd4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f04  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006af  00000000  00000000  00003b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  000041b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000179  00000000  00000000  000043b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000260e  00000000  00000000  00004531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002769  00000000  00000000  00006b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009639  00000000  00000000  000092a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000128e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000738  00000000  00000000  00012924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0001305c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <main>:
void button_read_polling();
void spi_write_read_polling(void);
void PMODSF_Write_EnDi(SPI_RegDef_t * pvSPIx, uint8_t EnDis);
//void i2c_write_read_interrupt(void);
int main(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//initialise_monitor_handles();
	//printf("Hello Dilraj\n");

	spi_write_read_polling();
 8000198:	f000 f802 	bl	80001a0 <spi_write_read_polling>

	//led_blinking();

	while(1)
 800019c:	bf00      	nop
 800019e:	e7fd      	b.n	800019c <main+0x8>

080001a0 <spi_write_read_polling>:

#define COMMAND_ID_READ      		0x54

uint8_t command[10] = {0x0}, response[10] = {0x0};
void spi_write_read_polling(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b086      	sub	sp, #24
 80001a4:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pvGPIOx = GPIOA;
 80001a6:	4b4b      	ldr	r3, [pc, #300]	@ (80002d4 <spi_write_read_polling+0x134>)
 80001a8:	603b      	str	r3, [r7, #0]
	SPIPins.GPIO_PinConfg.pinMode = GPIO_ALT_FUNC;
 80001aa:	2302      	movs	r3, #2
 80001ac:	717b      	strb	r3, [r7, #5]
	SPIPins.GPIO_PinConfg.pinOPType = GPIO_PUSHPULL;
 80001ae:	2300      	movs	r3, #0
 80001b0:	71bb      	strb	r3, [r7, #6]
	SPIPins.GPIO_PinConfg.pinPuPd = GPIO_NO_PUPD;//GPIO_PULL_UP;GPIO_NO_PUPD
 80001b2:	2300      	movs	r3, #0
 80001b4:	723b      	strb	r3, [r7, #8]
	SPIPins.GPIO_PinConfg.pinSpeed = GPIO_MEDIUM_SPEED;//GPIO_HIGH_SPEED;
 80001b6:	2301      	movs	r3, #1
 80001b8:	71fb      	strb	r3, [r7, #7]
	SPIPins.GPIO_PinConfg.pinAltFunMode = AF5_SPI_1_to_4;
 80001ba:	2305      	movs	r3, #5
 80001bc:	727b      	strb	r3, [r7, #9]

	//sck
	SPIPins.GPIO_PinConfg.pinNumber = PIN_NUMBER_5;//SCK pin D13
 80001be:	2305      	movs	r3, #5
 80001c0:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 80001c2:	463b      	mov	r3, r7
 80001c4:	4618      	mov	r0, r3
 80001c6:	f000 f91b 	bl	8000400 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfg.pinNumber = PIN_NUMBER_7;//MOSI pin D11
 80001ca:	2307      	movs	r3, #7
 80001cc:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 80001ce:	463b      	mov	r3, r7
 80001d0:	4618      	mov	r0, r3
 80001d2:	f000 f915 	bl	8000400 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfg.pinNumber = PIN_NUMBER_6;//MISO pin D12
 80001d6:	2306      	movs	r3, #6
 80001d8:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 80001da:	463b      	mov	r3, r7
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 f90f 	bl	8000400 <GPIO_Init>

	//CS
	SPIPins.pvGPIOx = GPIOB;
 80001e2:	4b3d      	ldr	r3, [pc, #244]	@ (80002d8 <spi_write_read_polling+0x138>)
 80001e4:	603b      	str	r3, [r7, #0]

	SPIPins.GPIO_PinConfg.pinNumber = PIN_NUMBER_6;//CS pin D10
 80001e6:	2306      	movs	r3, #6
 80001e8:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 80001ea:	463b      	mov	r3, r7
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 f907 	bl	8000400 <GPIO_Init>

	//initialize I2C configuration
	spi1.pSPIx = SPI1;
 80001f2:	4b3a      	ldr	r3, [pc, #232]	@ (80002dc <spi_write_read_polling+0x13c>)
 80001f4:	4a3a      	ldr	r2, [pc, #232]	@ (80002e0 <spi_write_read_polling+0x140>)
 80001f6:	601a      	str	r2, [r3, #0]
	spi1.SPIConfig.SPI_BusConfig = SPI_FULL_DUPLEX;
 80001f8:	4b38      	ldr	r3, [pc, #224]	@ (80002dc <spi_write_read_polling+0x13c>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	715a      	strb	r2, [r3, #5]
	spi1.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80001fe:	4b37      	ldr	r3, [pc, #220]	@ (80002dc <spi_write_read_polling+0x13c>)
 8000200:	2200      	movs	r2, #0
 8000202:	725a      	strb	r2, [r3, #9]
	spi1.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000204:	4b35      	ldr	r3, [pc, #212]	@ (80002dc <spi_write_read_polling+0x13c>)
 8000206:	2200      	movs	r2, #0
 8000208:	721a      	strb	r2, [r3, #8]
	spi1.SPIConfig.SPI_DFF = SPI_DFF_8BIT;
 800020a:	4b34      	ldr	r3, [pc, #208]	@ (80002dc <spi_write_read_polling+0x13c>)
 800020c:	2200      	movs	r2, #0
 800020e:	71da      	strb	r2, [r3, #7]
	spi1.SPIConfig.SPI_DeviceMode = SPI_MODE_MASTER;
 8000210:	4b32      	ldr	r3, [pc, #200]	@ (80002dc <spi_write_read_polling+0x13c>)
 8000212:	2201      	movs	r2, #1
 8000214:	711a      	strb	r2, [r3, #4]
	spi1.SPIConfig.SPI_SSM = SPI_SSM_DISABLE;
 8000216:	4b31      	ldr	r3, [pc, #196]	@ (80002dc <spi_write_read_polling+0x13c>)
 8000218:	2200      	movs	r2, #0
 800021a:	729a      	strb	r2, [r3, #10]
	spi1.SPIConfig.SPI_SclkSpeed = SPI_BAUDRATE_FPCLK_16 ;
 800021c:	4b2f      	ldr	r3, [pc, #188]	@ (80002dc <spi_write_read_polling+0x13c>)
 800021e:	2203      	movs	r2, #3
 8000220:	719a      	strb	r2, [r3, #6]
	spi1.SPIConfig.SPI_SSI = SPI_SSI_EN; //It Ignores the NSS pin value and set as per SSI register when SSM is enabled
 8000222:	4b2e      	ldr	r3, [pc, #184]	@ (80002dc <spi_write_read_polling+0x13c>)
 8000224:	2201      	movs	r2, #1
 8000226:	72da      	strb	r2, [r3, #11]

	// Enable IRQ configuration
	I2C_IRQInterruptConfig(IRQ_NO_SPI1_EV, SET);
 8000228:	2101      	movs	r1, #1
 800022a:	2023      	movs	r0, #35	@ 0x23
 800022c:	f000 f9f4 	bl	8000618 <I2C_IRQInterruptConfig>

	SPI_Init(&spi1);
 8000230:	482a      	ldr	r0, [pc, #168]	@ (80002dc <spi_write_read_polling+0x13c>)
 8000232:	f000 fab1 	bl	8000798 <SPI_Init>



	for(uint32_t i=0;i<1000;i++);
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]
 800023a:	e002      	b.n	8000242 <spi_write_read_polling+0xa2>
 800023c:	697b      	ldr	r3, [r7, #20]
 800023e:	3301      	adds	r3, #1
 8000240:	617b      	str	r3, [r7, #20]
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000248:	d3f8      	bcc.n	800023c <spi_write_read_polling+0x9c>
//	uint8_t command[] = 0x0, response = 0x0;
	command[0] = COMMAND_ID_READ;
 800024a:	4b26      	ldr	r3, [pc, #152]	@ (80002e4 <spi_write_read_polling+0x144>)
 800024c:	2254      	movs	r2, #84	@ 0x54
 800024e:	701a      	strb	r2, [r3, #0]
	SPI_MasterSendDataIT(&spi1, &command[0], 1);
 8000250:	2201      	movs	r2, #1
 8000252:	4924      	ldr	r1, [pc, #144]	@ (80002e4 <spi_write_read_polling+0x144>)
 8000254:	4821      	ldr	r0, [pc, #132]	@ (80002dc <spi_write_read_polling+0x13c>)
 8000256:	f000 fb2c 	bl	80008b2 <SPI_MasterSendDataIT>
	SPI_MasterReceiveDataIT( &spi1, &response[0], 1 );
 800025a:	2201      	movs	r2, #1
 800025c:	4922      	ldr	r1, [pc, #136]	@ (80002e8 <spi_write_read_polling+0x148>)
 800025e:	481f      	ldr	r0, [pc, #124]	@ (80002dc <spi_write_read_polling+0x13c>)
 8000260:	f000 fb03 	bl	800086a <SPI_MasterReceiveDataIT>
	command[0] = 0xFF;
 8000264:	4b1f      	ldr	r3, [pc, #124]	@ (80002e4 <spi_write_read_polling+0x144>)
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	701a      	strb	r2, [r3, #0]
	SPI_MasterSendDataIT(&spi1, &command[0], 1);
 800026a:	2201      	movs	r2, #1
 800026c:	491d      	ldr	r1, [pc, #116]	@ (80002e4 <spi_write_read_polling+0x144>)
 800026e:	481b      	ldr	r0, [pc, #108]	@ (80002dc <spi_write_read_polling+0x13c>)
 8000270:	f000 fb1f 	bl	80008b2 <SPI_MasterSendDataIT>

	SPI_MasterReceiveDataIT( &spi1, &response[0], 1 );
 8000274:	2201      	movs	r2, #1
 8000276:	491c      	ldr	r1, [pc, #112]	@ (80002e8 <spi_write_read_polling+0x148>)
 8000278:	4818      	ldr	r0, [pc, #96]	@ (80002dc <spi_write_read_polling+0x13c>)
 800027a:	f000 faf6 	bl	800086a <SPI_MasterReceiveDataIT>

	if(response[0] == 0xF5)
 800027e:	4b1a      	ldr	r3, [pc, #104]	@ (80002e8 <spi_write_read_polling+0x148>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	2bf5      	cmp	r3, #245	@ 0xf5
 8000284:	d115      	bne.n	80002b2 <spi_write_read_polling+0x112>
	{
		for(int i =0;i<10;i++)
 8000286:	2300      	movs	r3, #0
 8000288:	613b      	str	r3, [r7, #16]
 800028a:	e00f      	b.n	80002ac <spi_write_read_polling+0x10c>
		{
			SPI_MasterSendDataIT(&spi1, &command[0], 1);
 800028c:	2201      	movs	r2, #1
 800028e:	4915      	ldr	r1, [pc, #84]	@ (80002e4 <spi_write_read_polling+0x144>)
 8000290:	4812      	ldr	r0, [pc, #72]	@ (80002dc <spi_write_read_polling+0x13c>)
 8000292:	f000 fb0e 	bl	80008b2 <SPI_MasterSendDataIT>

			SPI_MasterReceiveDataIT( &spi1, &response[i], 1 );
 8000296:	693b      	ldr	r3, [r7, #16]
 8000298:	4a13      	ldr	r2, [pc, #76]	@ (80002e8 <spi_write_read_polling+0x148>)
 800029a:	4413      	add	r3, r2
 800029c:	2201      	movs	r2, #1
 800029e:	4619      	mov	r1, r3
 80002a0:	480e      	ldr	r0, [pc, #56]	@ (80002dc <spi_write_read_polling+0x13c>)
 80002a2:	f000 fae2 	bl	800086a <SPI_MasterReceiveDataIT>
		for(int i =0;i<10;i++)
 80002a6:	693b      	ldr	r3, [r7, #16]
 80002a8:	3301      	adds	r3, #1
 80002aa:	613b      	str	r3, [r7, #16]
 80002ac:	693b      	ldr	r3, [r7, #16]
 80002ae:	2b09      	cmp	r3, #9
 80002b0:	ddec      	ble.n	800028c <spi_write_read_polling+0xec>
		}
	}

	for(uint32_t i=0;i<1000;i++);
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	e002      	b.n	80002be <spi_write_read_polling+0x11e>
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	3301      	adds	r3, #1
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80002c4:	d3f8      	bcc.n	80002b8 <spi_write_read_polling+0x118>

	SPI_Close(SPI1);
 80002c6:	4806      	ldr	r0, [pc, #24]	@ (80002e0 <spi_write_read_polling+0x140>)
 80002c8:	f000 fbc9 	bl	8000a5e <SPI_Close>
}
 80002cc:	bf00      	nop
 80002ce:	3718      	adds	r7, #24
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40020000 	.word	0x40020000
 80002d8:	40020400 	.word	0x40020400
 80002dc:	20000000 	.word	0x20000000
 80002e0:	40013000 	.word	0x40013000
 80002e4:	20000020 	.word	0x20000020
 80002e8:	2000002c 	.word	0x2000002c

080002ec <SPI1_IRQHandler>:

	}
}

void SPI1_IRQHandler( void )
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	SPI_EV_Handling( &spi1 );
 80002f0:	4802      	ldr	r0, [pc, #8]	@ (80002fc <SPI1_IRQHandler+0x10>)
 80002f2:	f000 fb02 	bl	80008fa <SPI_EV_Handling>
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000000 	.word	0x20000000

08000300 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000300:	480c      	ldr	r0, [pc, #48]	@ (8000334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000302:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000304:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000308:	480b      	ldr	r0, [pc, #44]	@ (8000338 <LoopForever+0x6>)
  ldr r1, =_edata
 800030a:	490c      	ldr	r1, [pc, #48]	@ (800033c <LoopForever+0xa>)
  ldr r2, =_sidata
 800030c:	4a0c      	ldr	r2, [pc, #48]	@ (8000340 <LoopForever+0xe>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000310:	e002      	b.n	8000318 <LoopCopyDataInit>

08000312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000316:	3304      	adds	r3, #4

08000318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800031c:	d3f9      	bcc.n	8000312 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031e:	4a09      	ldr	r2, [pc, #36]	@ (8000344 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000320:	4c09      	ldr	r4, [pc, #36]	@ (8000348 <LoopForever+0x16>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000324:	e001      	b.n	800032a <LoopFillZerobss>

08000326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000328:	3204      	adds	r2, #4

0800032a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800032c:	d3fb      	bcc.n	8000326 <FillZerobss>

/* Call static constructors */
  //bl __libc_init_array
/* Call the application's entry point.*/
  bl main
 800032e:	f7ff ff31 	bl	8000194 <main>

08000332 <LoopForever>:

LoopForever:
  b LoopForever
 8000332:	e7fe      	b.n	8000332 <LoopForever>
  ldr   r0, =_estack
 8000334:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800033c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000340:	08000bd4 	.word	0x08000bd4
  ldr r2, =_sbss
 8000344:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000348:	20000038 	.word	0x20000038

0800034c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800034c:	e7fe      	b.n	800034c <ADC_IRQHandler>
	...

08000350 <GPIO_PeriClkCtrl>:
 */

#include "stm32f4xx_gpio_driver.h"

void GPIO_PeriClkCtrl(GPIO_RegDef_t *pvGPIOx,uint8_t EnDis)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	70fb      	strb	r3, [r7, #3]
	if(EnDis == ENABLE)
 800035c:	78fb      	ldrb	r3, [r7, #3]
 800035e:	2b01      	cmp	r3, #1
 8000360:	d120      	bne.n	80003a4 <GPIO_PeriClkCtrl+0x54>
	{
		if( pvGPIOx == GPIOA )
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a22      	ldr	r2, [pc, #136]	@ (80003f0 <GPIO_PeriClkCtrl+0xa0>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d106      	bne.n	8000378 <GPIO_PeriClkCtrl+0x28>
		{
			GPIOA_PCLK_EN();
 800036a:	4b22      	ldr	r3, [pc, #136]	@ (80003f4 <GPIO_PeriClkCtrl+0xa4>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036e:	4a21      	ldr	r2, [pc, #132]	@ (80003f4 <GPIO_PeriClkCtrl+0xa4>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6313      	str	r3, [r2, #48]	@ 0x30
		else if( pvGPIOx == GPIOC )
		{
			GPIOC_PCLK_DI();
		}
	}
}
 8000376:	e035      	b.n	80003e4 <GPIO_PeriClkCtrl+0x94>
		else if( pvGPIOx == GPIOB )
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a1f      	ldr	r2, [pc, #124]	@ (80003f8 <GPIO_PeriClkCtrl+0xa8>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d106      	bne.n	800038e <GPIO_PeriClkCtrl+0x3e>
			GPIOB_PCLK_EN();
 8000380:	4b1c      	ldr	r3, [pc, #112]	@ (80003f4 <GPIO_PeriClkCtrl+0xa4>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000384:	4a1b      	ldr	r2, [pc, #108]	@ (80003f4 <GPIO_PeriClkCtrl+0xa4>)
 8000386:	f043 0302 	orr.w	r3, r3, #2
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800038c:	e02a      	b.n	80003e4 <GPIO_PeriClkCtrl+0x94>
		else if( pvGPIOx == GPIOC )
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a1a      	ldr	r2, [pc, #104]	@ (80003fc <GPIO_PeriClkCtrl+0xac>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d126      	bne.n	80003e4 <GPIO_PeriClkCtrl+0x94>
			GPIOC_PCLK_EN();
 8000396:	4b17      	ldr	r3, [pc, #92]	@ (80003f4 <GPIO_PeriClkCtrl+0xa4>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039a:	4a16      	ldr	r2, [pc, #88]	@ (80003f4 <GPIO_PeriClkCtrl+0xa4>)
 800039c:	f043 0304 	orr.w	r3, r3, #4
 80003a0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a2:	e01f      	b.n	80003e4 <GPIO_PeriClkCtrl+0x94>
		if( pvGPIOx == GPIOA )
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <GPIO_PeriClkCtrl+0xa0>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d106      	bne.n	80003ba <GPIO_PeriClkCtrl+0x6a>
			GPIOA_PCLK_DI();
 80003ac:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <GPIO_PeriClkCtrl+0xa4>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b0:	4a10      	ldr	r2, [pc, #64]	@ (80003f4 <GPIO_PeriClkCtrl+0xa4>)
 80003b2:	f023 0301 	bic.w	r3, r3, #1
 80003b6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b8:	e014      	b.n	80003e4 <GPIO_PeriClkCtrl+0x94>
		else if( pvGPIOx == GPIOB )
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a0e      	ldr	r2, [pc, #56]	@ (80003f8 <GPIO_PeriClkCtrl+0xa8>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PeriClkCtrl+0x80>
			GPIOB_PCLK_DI();
 80003c2:	4b0c      	ldr	r3, [pc, #48]	@ (80003f4 <GPIO_PeriClkCtrl+0xa4>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c6:	4a0b      	ldr	r2, [pc, #44]	@ (80003f4 <GPIO_PeriClkCtrl+0xa4>)
 80003c8:	f023 0302 	bic.w	r3, r3, #2
 80003cc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ce:	e009      	b.n	80003e4 <GPIO_PeriClkCtrl+0x94>
		else if( pvGPIOx == GPIOC )
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a0a      	ldr	r2, [pc, #40]	@ (80003fc <GPIO_PeriClkCtrl+0xac>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d105      	bne.n	80003e4 <GPIO_PeriClkCtrl+0x94>
			GPIOC_PCLK_DI();
 80003d8:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <GPIO_PeriClkCtrl+0xa4>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003dc:	4a05      	ldr	r2, [pc, #20]	@ (80003f4 <GPIO_PeriClkCtrl+0xa4>)
 80003de:	f023 0304 	bic.w	r3, r3, #4
 80003e2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	40020000 	.word	0x40020000
 80003f4:	40023800 	.word	0x40023800
 80003f8:	40020400 	.word	0x40020400
 80003fc:	40020800 	.word	0x40020800

08000400 <GPIO_Init>:
void GPIO_Init(GPIO_Handle_t *pvGPIO_handle)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]

	//enable peripheral clock
	GPIO_PeriClkCtrl(pvGPIO_handle->pvGPIOx,ENABLE);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2101      	movs	r1, #1
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff ff9c 	bl	8000350 <GPIO_PeriClkCtrl>

	//mode configuration
	if(pvGPIO_handle->GPIO_PinConfg.pinMode <= GPIO_ANALOG)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	795b      	ldrb	r3, [r3, #5]
 800041c:	2b03      	cmp	r3, #3
 800041e:	d862      	bhi.n	80004e6 <GPIO_Init+0xe6>
	{
		temp = (pvGPIO_handle->GPIO_PinConfg.pinMode << ( 2 * pvGPIO_handle->GPIO_PinConfg.pinNumber));
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	795b      	ldrb	r3, [r3, #5]
 8000424:	461a      	mov	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	791b      	ldrb	r3, [r3, #4]
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	fa02 f303 	lsl.w	r3, r2, r3
 8000430:	60fb      	str	r3, [r7, #12]
		pvGPIO_handle->pvGPIOx->MODER |= temp;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	6819      	ldr	r1, [r3, #0]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	68fa      	ldr	r2, [r7, #12]
 800043e:	430a      	orrs	r2, r1
 8000440:	601a      	str	r2, [r3, #0]

		//output type configuration
		temp = 0;
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
		temp = (pvGPIO_handle->GPIO_PinConfg.pinOPType << pvGPIO_handle->GPIO_PinConfg.pinNumber);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	799b      	ldrb	r3, [r3, #6]
 800044a:	461a      	mov	r2, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	791b      	ldrb	r3, [r3, #4]
 8000450:	fa02 f303 	lsl.w	r3, r2, r3
 8000454:	60fb      	str	r3, [r7, #12]
		pvGPIO_handle->pvGPIOx->OTYPER |= temp;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	6859      	ldr	r1, [r3, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	68fa      	ldr	r2, [r7, #12]
 8000462:	430a      	orrs	r2, r1
 8000464:	605a      	str	r2, [r3, #4]

		//speed configuration
		temp = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	60fb      	str	r3, [r7, #12]
		temp = (pvGPIO_handle->GPIO_PinConfg.pinSpeed << ( 2 * pvGPIO_handle->GPIO_PinConfg.pinNumber));
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	79db      	ldrb	r3, [r3, #7]
 800046e:	461a      	mov	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	791b      	ldrb	r3, [r3, #4]
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	fa02 f303 	lsl.w	r3, r2, r3
 800047a:	60fb      	str	r3, [r7, #12]
		pvGPIO_handle->pvGPIOx->OSPEEDR |= temp;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	6899      	ldr	r1, [r3, #8]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	68fa      	ldr	r2, [r7, #12]
 8000488:	430a      	orrs	r2, r1
 800048a:	609a      	str	r2, [r3, #8]

		//alternate function selection
		//for alternate function high register
		uint8_t pin_number = pvGPIO_handle->GPIO_PinConfg.pinNumber;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	791b      	ldrb	r3, [r3, #4]
 8000490:	727b      	strb	r3, [r7, #9]
		if(pin_number>7)
 8000492:	7a7b      	ldrb	r3, [r7, #9]
 8000494:	2b07      	cmp	r3, #7
 8000496:	d913      	bls.n	80004c0 <GPIO_Init+0xc0>
		{
			temp=0;
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
			temp = ((pvGPIO_handle->GPIO_PinConfg.pinAltFunMode << ((pin_number-8)*4)));
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	7a5b      	ldrb	r3, [r3, #9]
 80004a0:	461a      	mov	r2, r3
 80004a2:	7a7b      	ldrb	r3, [r7, #9]
 80004a4:	3b08      	subs	r3, #8
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ac:	60fb      	str	r3, [r7, #12]
			pvGPIO_handle->pvGPIOx->AFR[1] |= temp;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	68fa      	ldr	r2, [r7, #12]
 80004ba:	430a      	orrs	r2, r1
 80004bc:	625a      	str	r2, [r3, #36]	@ 0x24
 80004be:	e088      	b.n	80005d2 <GPIO_Init+0x1d2>
		}
		//for alternate function low register
		else
		{
			temp=0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
			temp = ((pvGPIO_handle->GPIO_PinConfg.pinAltFunMode << (pin_number*4)));
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	7a5b      	ldrb	r3, [r3, #9]
 80004c8:	461a      	mov	r2, r3
 80004ca:	7a7b      	ldrb	r3, [r7, #9]
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	fa02 f303 	lsl.w	r3, r2, r3
 80004d2:	60fb      	str	r3, [r7, #12]
			pvGPIO_handle->pvGPIOx->AFR[0] |= temp;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	6a19      	ldr	r1, [r3, #32]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	430a      	orrs	r2, r1
 80004e2:	621a      	str	r2, [r3, #32]
 80004e4:	e075      	b.n	80005d2 <GPIO_Init+0x1d2>
		}
	}
	else /*EXTI : Interrupt related initialization*/
	{
		if(pvGPIO_handle->GPIO_PinConfg.pinMode == GPIO_EXTI_FT)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	795b      	ldrb	r3, [r3, #5]
 80004ea:	2b04      	cmp	r3, #4
 80004ec:	d117      	bne.n	800051e <GPIO_Init+0x11e>
		{
			EXTI-> EXTI_FTSR |= (1<<pvGPIO_handle->GPIO_PinConfg.pinNumber);
 80004ee:	4b44      	ldr	r3, [pc, #272]	@ (8000600 <GPIO_Init+0x200>)
 80004f0:	68db      	ldr	r3, [r3, #12]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	7912      	ldrb	r2, [r2, #4]
 80004f6:	4611      	mov	r1, r2
 80004f8:	2201      	movs	r2, #1
 80004fa:	408a      	lsls	r2, r1
 80004fc:	4611      	mov	r1, r2
 80004fe:	4a40      	ldr	r2, [pc, #256]	@ (8000600 <GPIO_Init+0x200>)
 8000500:	430b      	orrs	r3, r1
 8000502:	60d3      	str	r3, [r2, #12]
			EXTI-> EXTI_RTSR &= ~(1<<pvGPIO_handle->GPIO_PinConfg.pinNumber);//clear RTSR
 8000504:	4b3e      	ldr	r3, [pc, #248]	@ (8000600 <GPIO_Init+0x200>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	7912      	ldrb	r2, [r2, #4]
 800050c:	4611      	mov	r1, r2
 800050e:	2201      	movs	r2, #1
 8000510:	408a      	lsls	r2, r1
 8000512:	43d2      	mvns	r2, r2
 8000514:	4611      	mov	r1, r2
 8000516:	4a3a      	ldr	r2, [pc, #232]	@ (8000600 <GPIO_Init+0x200>)
 8000518:	400b      	ands	r3, r1
 800051a:	6093      	str	r3, [r2, #8]
 800051c:	e01a      	b.n	8000554 <GPIO_Init+0x154>
		}
		else if(pvGPIO_handle->GPIO_PinConfg.pinMode == GPIO_EXTI_RT)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	795b      	ldrb	r3, [r3, #5]
 8000522:	2b05      	cmp	r3, #5
 8000524:	d116      	bne.n	8000554 <GPIO_Init+0x154>
		{
			EXTI-> EXTI_RTSR |= (1<<pvGPIO_handle->GPIO_PinConfg.pinNumber);
 8000526:	4b36      	ldr	r3, [pc, #216]	@ (8000600 <GPIO_Init+0x200>)
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	7912      	ldrb	r2, [r2, #4]
 800052e:	4611      	mov	r1, r2
 8000530:	2201      	movs	r2, #1
 8000532:	408a      	lsls	r2, r1
 8000534:	4611      	mov	r1, r2
 8000536:	4a32      	ldr	r2, [pc, #200]	@ (8000600 <GPIO_Init+0x200>)
 8000538:	430b      	orrs	r3, r1
 800053a:	6093      	str	r3, [r2, #8]
			EXTI-> EXTI_FTSR &= ~(1<<pvGPIO_handle->GPIO_PinConfg.pinNumber); // clear FTSR
 800053c:	4b30      	ldr	r3, [pc, #192]	@ (8000600 <GPIO_Init+0x200>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	7912      	ldrb	r2, [r2, #4]
 8000544:	4611      	mov	r1, r2
 8000546:	2201      	movs	r2, #1
 8000548:	408a      	lsls	r2, r1
 800054a:	43d2      	mvns	r2, r2
 800054c:	4611      	mov	r1, r2
 800054e:	4a2c      	ldr	r2, [pc, #176]	@ (8000600 <GPIO_Init+0x200>)
 8000550:	400b      	ands	r3, r1
 8000552:	60d3      	str	r3, [r2, #12]
		}
		/*configure interrupt mask register*/
		EXTI->EXTI_IMR |= (1<<pvGPIO_handle->GPIO_PinConfg.pinNumber);
 8000554:	4b2a      	ldr	r3, [pc, #168]	@ (8000600 <GPIO_Init+0x200>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	7912      	ldrb	r2, [r2, #4]
 800055c:	4611      	mov	r1, r2
 800055e:	2201      	movs	r2, #1
 8000560:	408a      	lsls	r2, r1
 8000562:	4611      	mov	r1, r2
 8000564:	4a26      	ldr	r2, [pc, #152]	@ (8000600 <GPIO_Init+0x200>)
 8000566:	430b      	orrs	r3, r1
 8000568:	6013      	str	r3, [r2, #0]

		/*configure SYSCFG control register*/
		uint8_t temp1 = pvGPIO_handle->GPIO_PinConfg.pinNumber / 4;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	089b      	lsrs	r3, r3, #2
 8000570:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pvGPIO_handle->GPIO_PinConfg.pinNumber % 4;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	791b      	ldrb	r3, [r3, #4]
 8000576:	f003 0303 	and.w	r3, r3, #3
 800057a:	72bb      	strb	r3, [r7, #10]
		//Enable syscfg clock before EXTICR configuration
		SYSCFG_PCLK_EN();
 800057c:	4b21      	ldr	r3, [pc, #132]	@ (8000604 <GPIO_Init+0x204>)
 800057e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000580:	4a20      	ldr	r2, [pc, #128]	@ (8000604 <GPIO_Init+0x204>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000586:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->SYSCFG_EXTICR[temp1] |= SYSCFG_EXTICR_PORT_SELECT(pvGPIO_handle->pvGPIOx) << (temp2 * 4);
 8000588:	4a1f      	ldr	r2, [pc, #124]	@ (8000608 <GPIO_Init+0x208>)
 800058a:	7afb      	ldrb	r3, [r7, #11]
 800058c:	3302      	adds	r3, #2
 800058e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	491d      	ldr	r1, [pc, #116]	@ (800060c <GPIO_Init+0x20c>)
 8000598:	428b      	cmp	r3, r1
 800059a:	d00f      	beq.n	80005bc <GPIO_Init+0x1bc>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	491b      	ldr	r1, [pc, #108]	@ (8000610 <GPIO_Init+0x210>)
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d008      	beq.n	80005b8 <GPIO_Init+0x1b8>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	491a      	ldr	r1, [pc, #104]	@ (8000614 <GPIO_Init+0x214>)
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d101      	bne.n	80005b4 <GPIO_Init+0x1b4>
 80005b0:	2302      	movs	r3, #2
 80005b2:	e004      	b.n	80005be <GPIO_Init+0x1be>
 80005b4:	23ff      	movs	r3, #255	@ 0xff
 80005b6:	e002      	b.n	80005be <GPIO_Init+0x1be>
 80005b8:	2301      	movs	r3, #1
 80005ba:	e000      	b.n	80005be <GPIO_Init+0x1be>
 80005bc:	2300      	movs	r3, #0
 80005be:	7ab9      	ldrb	r1, [r7, #10]
 80005c0:	0089      	lsls	r1, r1, #2
 80005c2:	408b      	lsls	r3, r1
 80005c4:	4618      	mov	r0, r3
 80005c6:	4910      	ldr	r1, [pc, #64]	@ (8000608 <GPIO_Init+0x208>)
 80005c8:	7afb      	ldrb	r3, [r7, #11]
 80005ca:	4302      	orrs	r2, r0
 80005cc:	3302      	adds	r3, #2
 80005ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}



	//pull up-down configuration
	temp = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
	temp = (pvGPIO_handle->GPIO_PinConfg.pinPuPd << ( 2 * pvGPIO_handle->GPIO_PinConfg.pinNumber));
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	7a1b      	ldrb	r3, [r3, #8]
 80005da:	461a      	mov	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	791b      	ldrb	r3, [r3, #4]
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	60fb      	str	r3, [r7, #12]
	pvGPIO_handle->pvGPIOx->PUPDR |= temp;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	68d9      	ldr	r1, [r3, #12]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	430a      	orrs	r2, r1
 80005f6:	60da      	str	r2, [r3, #12]


}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40013c00 	.word	0x40013c00
 8000604:	40023800 	.word	0x40023800
 8000608:	40013800 	.word	0x40013800
 800060c:	40020000 	.word	0x40020000
 8000610:	40020400 	.word	0x40020400
 8000614:	40020800 	.word	0x40020800

08000618 <I2C_IRQInterruptConfig>:
{
	return 0;
}

void I2C_IRQInterruptConfig(uint8_t IRQNumber,uint8_t EnDis)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	460a      	mov	r2, r1
 8000622:	71fb      	strb	r3, [r7, #7]
 8000624:	4613      	mov	r3, r2
 8000626:	71bb      	strb	r3, [r7, #6]
	 if(EnDis)
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d04e      	beq.n	80006cc <I2C_IRQInterruptConfig+0xb4>
	 {
		 if(IRQNumber < 32)
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b1f      	cmp	r3, #31
 8000632:	d80a      	bhi.n	800064a <I2C_IRQInterruptConfig+0x32>
		 {
			 *NVIC_ISER0 |= (1<<IRQNumber);
 8000634:	4b4f      	ldr	r3, [pc, #316]	@ (8000774 <I2C_IRQInterruptConfig+0x15c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	79fa      	ldrb	r2, [r7, #7]
 800063a:	2101      	movs	r1, #1
 800063c:	fa01 f202 	lsl.w	r2, r1, r2
 8000640:	4611      	mov	r1, r2
 8000642:	4a4c      	ldr	r2, [pc, #304]	@ (8000774 <I2C_IRQInterruptConfig+0x15c>)
 8000644:	430b      	orrs	r3, r1
 8000646:	6013      	str	r3, [r2, #0]
		 else if(IRQNumber >=96 && IRQNumber < 128)
		 {
			 *NVIC_ICER3 |= (1<<(IRQNumber % 96));
		 }
	 }
}
 8000648:	e08f      	b.n	800076a <I2C_IRQInterruptConfig+0x152>
		 else if(IRQNumber >= 32 && IRQNumber < 64)
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b1f      	cmp	r3, #31
 800064e:	d90f      	bls.n	8000670 <I2C_IRQInterruptConfig+0x58>
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2b3f      	cmp	r3, #63	@ 0x3f
 8000654:	d80c      	bhi.n	8000670 <I2C_IRQInterruptConfig+0x58>
			 *NVIC_ISER1 |= (1<<(IRQNumber % 32));
 8000656:	4b48      	ldr	r3, [pc, #288]	@ (8000778 <I2C_IRQInterruptConfig+0x160>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	79fa      	ldrb	r2, [r7, #7]
 800065c:	f002 021f 	and.w	r2, r2, #31
 8000660:	2101      	movs	r1, #1
 8000662:	fa01 f202 	lsl.w	r2, r1, r2
 8000666:	4611      	mov	r1, r2
 8000668:	4a43      	ldr	r2, [pc, #268]	@ (8000778 <I2C_IRQInterruptConfig+0x160>)
 800066a:	430b      	orrs	r3, r1
 800066c:	6013      	str	r3, [r2, #0]
 800066e:	e07c      	b.n	800076a <I2C_IRQInterruptConfig+0x152>
		 else if(IRQNumber >=64 && IRQNumber < 96)
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	2b3f      	cmp	r3, #63	@ 0x3f
 8000674:	d90f      	bls.n	8000696 <I2C_IRQInterruptConfig+0x7e>
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2b5f      	cmp	r3, #95	@ 0x5f
 800067a:	d80c      	bhi.n	8000696 <I2C_IRQInterruptConfig+0x7e>
			 *NVIC_ISER2 |= (1<<(IRQNumber % 64));
 800067c:	4b3f      	ldr	r3, [pc, #252]	@ (800077c <I2C_IRQInterruptConfig+0x164>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	79fa      	ldrb	r2, [r7, #7]
 8000682:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000686:	2101      	movs	r1, #1
 8000688:	fa01 f202 	lsl.w	r2, r1, r2
 800068c:	4611      	mov	r1, r2
 800068e:	4a3b      	ldr	r2, [pc, #236]	@ (800077c <I2C_IRQInterruptConfig+0x164>)
 8000690:	430b      	orrs	r3, r1
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	e069      	b.n	800076a <I2C_IRQInterruptConfig+0x152>
		 else if(IRQNumber >=96 && IRQNumber < 128)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b5f      	cmp	r3, #95	@ 0x5f
 800069a:	d966      	bls.n	800076a <I2C_IRQInterruptConfig+0x152>
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db62      	blt.n	800076a <I2C_IRQInterruptConfig+0x152>
			 *NVIC_ISER3 |= (1<<(IRQNumber % 96));
 80006a4:	4b36      	ldr	r3, [pc, #216]	@ (8000780 <I2C_IRQInterruptConfig+0x168>)
 80006a6:	6818      	ldr	r0, [r3, #0]
 80006a8:	79fa      	ldrb	r2, [r7, #7]
 80006aa:	4b36      	ldr	r3, [pc, #216]	@ (8000784 <I2C_IRQInterruptConfig+0x16c>)
 80006ac:	fba3 1302 	umull	r1, r3, r3, r2
 80006b0:	0999      	lsrs	r1, r3, #6
 80006b2:	460b      	mov	r3, r1
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	440b      	add	r3, r1
 80006b8:	015b      	lsls	r3, r3, #5
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	461a      	mov	r2, r3
 80006c0:	2301      	movs	r3, #1
 80006c2:	4093      	lsls	r3, r2
 80006c4:	4a2e      	ldr	r2, [pc, #184]	@ (8000780 <I2C_IRQInterruptConfig+0x168>)
 80006c6:	4303      	orrs	r3, r0
 80006c8:	6013      	str	r3, [r2, #0]
}
 80006ca:	e04e      	b.n	800076a <I2C_IRQInterruptConfig+0x152>
		 if(IRQNumber < 32)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b1f      	cmp	r3, #31
 80006d0:	d80a      	bhi.n	80006e8 <I2C_IRQInterruptConfig+0xd0>
			 *NVIC_ICER0 |= (1<<IRQNumber);
 80006d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000788 <I2C_IRQInterruptConfig+0x170>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	79fa      	ldrb	r2, [r7, #7]
 80006d8:	2101      	movs	r1, #1
 80006da:	fa01 f202 	lsl.w	r2, r1, r2
 80006de:	4611      	mov	r1, r2
 80006e0:	4a29      	ldr	r2, [pc, #164]	@ (8000788 <I2C_IRQInterruptConfig+0x170>)
 80006e2:	430b      	orrs	r3, r1
 80006e4:	6013      	str	r3, [r2, #0]
}
 80006e6:	e040      	b.n	800076a <I2C_IRQInterruptConfig+0x152>
		 else if(IRQNumber >= 32 && IRQNumber < 64)
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	2b1f      	cmp	r3, #31
 80006ec:	d90f      	bls.n	800070e <I2C_IRQInterruptConfig+0xf6>
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80006f2:	d80c      	bhi.n	800070e <I2C_IRQInterruptConfig+0xf6>
			 *NVIC_ICER1 |= (1<<(IRQNumber % 32));
 80006f4:	4b25      	ldr	r3, [pc, #148]	@ (800078c <I2C_IRQInterruptConfig+0x174>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	79fa      	ldrb	r2, [r7, #7]
 80006fa:	f002 021f 	and.w	r2, r2, #31
 80006fe:	2101      	movs	r1, #1
 8000700:	fa01 f202 	lsl.w	r2, r1, r2
 8000704:	4611      	mov	r1, r2
 8000706:	4a21      	ldr	r2, [pc, #132]	@ (800078c <I2C_IRQInterruptConfig+0x174>)
 8000708:	430b      	orrs	r3, r1
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	e02d      	b.n	800076a <I2C_IRQInterruptConfig+0x152>
		 else if(IRQNumber >=64 && IRQNumber < 96)
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	2b3f      	cmp	r3, #63	@ 0x3f
 8000712:	d90f      	bls.n	8000734 <I2C_IRQInterruptConfig+0x11c>
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b5f      	cmp	r3, #95	@ 0x5f
 8000718:	d80c      	bhi.n	8000734 <I2C_IRQInterruptConfig+0x11c>
			 *NVIC_ICER2 |= (1<<(IRQNumber % 64));
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <I2C_IRQInterruptConfig+0x178>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	79fa      	ldrb	r2, [r7, #7]
 8000720:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000724:	2101      	movs	r1, #1
 8000726:	fa01 f202 	lsl.w	r2, r1, r2
 800072a:	4611      	mov	r1, r2
 800072c:	4a18      	ldr	r2, [pc, #96]	@ (8000790 <I2C_IRQInterruptConfig+0x178>)
 800072e:	430b      	orrs	r3, r1
 8000730:	6013      	str	r3, [r2, #0]
 8000732:	e01a      	b.n	800076a <I2C_IRQInterruptConfig+0x152>
		 else if(IRQNumber >=96 && IRQNumber < 128)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	2b5f      	cmp	r3, #95	@ 0x5f
 8000738:	d917      	bls.n	800076a <I2C_IRQInterruptConfig+0x152>
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	2b00      	cmp	r3, #0
 8000740:	db13      	blt.n	800076a <I2C_IRQInterruptConfig+0x152>
			 *NVIC_ICER3 |= (1<<(IRQNumber % 96));
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <I2C_IRQInterruptConfig+0x17c>)
 8000744:	6818      	ldr	r0, [r3, #0]
 8000746:	79fa      	ldrb	r2, [r7, #7]
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <I2C_IRQInterruptConfig+0x16c>)
 800074a:	fba3 1302 	umull	r1, r3, r3, r2
 800074e:	0999      	lsrs	r1, r3, #6
 8000750:	460b      	mov	r3, r1
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	440b      	add	r3, r1
 8000756:	015b      	lsls	r3, r3, #5
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	b2db      	uxtb	r3, r3
 800075c:	461a      	mov	r2, r3
 800075e:	2301      	movs	r3, #1
 8000760:	4093      	lsls	r3, r2
 8000762:	4a0c      	ldr	r2, [pc, #48]	@ (8000794 <I2C_IRQInterruptConfig+0x17c>)
 8000764:	4303      	orrs	r3, r0
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	e7ff      	b.n	800076a <I2C_IRQInterruptConfig+0x152>
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	e000e100 	.word	0xe000e100
 8000778:	e000e104 	.word	0xe000e104
 800077c:	e000e108 	.word	0xe000e108
 8000780:	e000e10c 	.word	0xe000e10c
 8000784:	aaaaaaab 	.word	0xaaaaaaab
 8000788:	e000e180 	.word	0xe000e180
 800078c:	e000e184 	.word	0xe000e184
 8000790:	e000e188 	.word	0xe000e188
 8000794:	e000e18c 	.word	0xe000e18c

08000798 <SPI_Init>:

#include "stm32f4xx_spi_driver.h"


void SPI_Init(SPI_Handle_t *pvSPI_handle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	//first let configure the SPI_CR1 register

	uint32_t tempreg =0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]

	//Enable SPI peripheral clock
	SPI_PeriClkCtrl(pvSPI_handle->pSPIx,ENABLE);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2101      	movs	r1, #1
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f9ba 	bl	8000b24 <SPI_PeriClkCtrl>

	//set device mode, master/slave
	tempreg |= ( pvSPI_handle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR );
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	791b      	ldrb	r3, [r3, #4]
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	60fb      	str	r3, [r7, #12]

	//set communication modes
	if(pvSPI_handle->SPIConfig.SPI_BusConfig == SPI_FULL_DUPLEX)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	795b      	ldrb	r3, [r3, #5]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d104      	bne.n	80007ce <SPI_Init+0x36>
	{
		//BIDI mode is cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	e010      	b.n	80007f0 <SPI_Init+0x58>
	}
	else if(pvSPI_handle->SPIConfig.SPI_BusConfig == SPI_HALF_DUPLEX)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	795b      	ldrb	r3, [r3, #5]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d104      	bne.n	80007e0 <SPI_Init+0x48>
	{
		//BIDI mode is Set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	e007      	b.n	80007f0 <SPI_Init+0x58>
	else//simplex
	{
		//BIDI mode is cleared
		//RXONLY is set
		//In simplex Readonly is provided
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80007e6:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << SPI_CR1_RXONLY);
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007ee:	60fb      	str	r3, [r7, #12]
	}

	//set clock speed
	tempreg |= ( pvSPI_handle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR );
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	799b      	ldrb	r3, [r3, #6]
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	60fb      	str	r3, [r7, #12]

	//set data format
	tempreg |= ( pvSPI_handle->SPIConfig.SPI_DFF << SPI_CR1_DFF );
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	79db      	ldrb	r3, [r3, #7]
 8000800:	02db      	lsls	r3, r3, #11
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	4313      	orrs	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]

	//set clock polarity
	tempreg |= ( pvSPI_handle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL );
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	7a1b      	ldrb	r3, [r3, #8]
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	4313      	orrs	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]

	//set clock phase
	tempreg |= ( pvSPI_handle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA );
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7a5b      	ldrb	r3, [r3, #9]
 8000818:	461a      	mov	r2, r3
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	4313      	orrs	r3, r2
 800081e:	60fb      	str	r3, [r7, #12]

	//set software slave select
	tempreg |= ( pvSPI_handle->SPIConfig.SPI_SSM << SPI_CR1_SSM );
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7a9b      	ldrb	r3, [r3, #10]
 8000824:	025b      	lsls	r3, r3, #9
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	4313      	orrs	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]

	//SSI enable/disable when SSM is enabled
	if( pvSPI_handle->SPIConfig.SPI_SSM == SET )
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	7a9b      	ldrb	r3, [r3, #10]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d106      	bne.n	8000842 <SPI_Init+0xaa>
	{
		tempreg |= ( pvSPI_handle->SPIConfig.SPI_SSI << SPI_CR1_SSI );
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	7adb      	ldrb	r3, [r3, #11]
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	4313      	orrs	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	e007      	b.n	8000852 <SPI_Init+0xba>
	}
	else
	{
		//when Slave select pin is managed by hardware, it managed automatically
		//it becomes low when SPE =1 and becomes high when SPE=0;
		pvSPI_handle->pSPIx->SPI_CR2 |= ( 1 << SPI_CR2_SSOE ) ;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	685a      	ldr	r2, [r3, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f042 0204 	orr.w	r2, r2, #4
 8000850:	605a      	str	r2, [r3, #4]
	}

	//enable SPI peripheral
	tempreg |= ( 1<< SPI_CR1_SPE);
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000858:	60fb      	str	r3, [r7, #12]

	pvSPI_handle->pSPIx->SPI_CR1 = tempreg;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	601a      	str	r2, [r3, #0]
}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <SPI_MasterReceiveDataIT>:
	while(!(pvSPIx->SPI_SR & ( 1 << SPI_SR_TXE )));
	while((pvSPIx->SPI_SR & ( 1 << SPI_SR_BSY )));
}

void SPI_MasterReceiveDataIT(SPI_Handle_t *pvSPIHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 800086a:	b480      	push	{r7}
 800086c:	b085      	sub	sp, #20
 800086e:	af00      	add	r7, sp, #0
 8000870:	60f8      	str	r0, [r7, #12]
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
	pvSPIHandle->TxRxState = SPI_BUSY_RX;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	2202      	movs	r2, #2
 800087a:	771a      	strb	r2, [r3, #28]
	pvSPIHandle->pRxBuffer = pRxBuffer;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	611a      	str	r2, [r3, #16]
	pvSPIHandle->RxLen = Len;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	619a      	str	r2, [r3, #24]
	//enable TXEIE and ERRIE interrupt
	pvSPIHandle->pSPIx->SPI_CR2 |= ( 1 << SPI_CR2_RXNEIE );
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	685a      	ldr	r2, [r3, #4]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000896:	605a      	str	r2, [r3, #4]
	pvSPIHandle->pSPIx->SPI_CR2 |= ( 1 << SPI_CR2_ERRIE );
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	685a      	ldr	r2, [r3, #4]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f042 0220 	orr.w	r2, r2, #32
 80008a6:	605a      	str	r2, [r3, #4]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <SPI_MasterSendDataIT>:
void SPI_MasterSendDataIT(SPI_Handle_t *pvSPIHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b085      	sub	sp, #20
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
	pvSPIHandle->TxRxState = SPI_BUSY_TX;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	2201      	movs	r2, #1
 80008c2:	771a      	strb	r2, [r3, #28]
	pvSPIHandle->pTxBuffer = pTxBuffer;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	60da      	str	r2, [r3, #12]
	pvSPIHandle->TxLen = Len;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	615a      	str	r2, [r3, #20]
	//enable TXEIE and ERRIE interrupt
	pvSPIHandle->pSPIx->SPI_CR2 |= ( 1 << SPI_CR2_TXEIE );
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	685a      	ldr	r2, [r3, #4]
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80008de:	605a      	str	r2, [r3, #4]
	pvSPIHandle->pSPIx->SPI_CR2 |= ( 1 << SPI_CR2_ERRIE );
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	685a      	ldr	r2, [r3, #4]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f042 0220 	orr.w	r2, r2, #32
 80008ee:	605a      	str	r2, [r3, #4]

}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <SPI_EV_Handling>:
void SPI_EV_Handling(SPI_Handle_t * pvHandle)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b084      	sub	sp, #16
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
	uint8_t temp1,temp2,temp3;

	//check TXE event
	temp1 = (pvHandle->pSPIx->SPI_SR & ( 1 << SPI_SR_TXE ));
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	73fb      	strb	r3, [r7, #15]
	temp2 = (pvHandle->pSPIx->SPI_CR2 & ( 1 << SPI_CR2_TXEIE ));
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800091c:	73bb      	strb	r3, [r7, #14]

	temp3 = (pvHandle->pSPIx->SPI_CR1 & ( 1 << SPI_CR1_DFF ));
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2300      	movs	r3, #0
 8000926:	737b      	strb	r3, [r7, #13]
	if( temp1 && temp2 )
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d02b      	beq.n	8000986 <SPI_EV_Handling+0x8c>
 800092e:	7bbb      	ldrb	r3, [r7, #14]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d028      	beq.n	8000986 <SPI_EV_Handling+0x8c>
	{
		if(temp3)
 8000934:	7b7b      	ldrb	r3, [r7, #13]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d015      	beq.n	8000966 <SPI_EV_Handling+0x6c>
		{
			pvHandle->pSPIx->SPI_DR = *((uint16_t*)pvHandle->pTxBuffer) ;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	881a      	ldrh	r2, [r3, #0]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	60da      	str	r2, [r3, #12]
			(uint16_t*)pvHandle->pTxBuffer++;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	60da      	str	r2, [r3, #12]
			pvHandle->TxLen--;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	1e5a      	subs	r2, r3, #1
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	615a      	str	r2, [r3, #20]
			pvHandle->TxLen--;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	1e5a      	subs	r2, r3, #1
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	615a      	str	r2, [r3, #20]
 8000964:	e00f      	b.n	8000986 <SPI_EV_Handling+0x8c>
		}
		else
		{
			pvHandle->pSPIx->SPI_DR = *pvHandle->pTxBuffer;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	781a      	ldrb	r2, [r3, #0]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	60da      	str	r2, [r3, #12]
			pvHandle->pTxBuffer++;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	60da      	str	r2, [r3, #12]
			pvHandle->TxLen--;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	1e5a      	subs	r2, r3, #1
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	615a      	str	r2, [r3, #20]
		}
	}

	//check RXNE event
	temp1 = (pvHandle->pSPIx->SPI_SR & ( 1 << SPI_SR_RXNE ));
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	73fb      	strb	r3, [r7, #15]
	temp2 = (pvHandle->pSPIx->SPI_CR2 & ( 1 << SPI_CR2_RXNEIE ));
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009a0:	73bb      	strb	r3, [r7, #14]

	temp3 = (pvHandle->pSPIx->SPI_CR1 & ( 1 << SPI_CR1_DFF ));
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2300      	movs	r3, #0
 80009aa:	737b      	strb	r3, [r7, #13]
	if( temp1 && temp2 )
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d02d      	beq.n	8000a0e <SPI_EV_Handling+0x114>
 80009b2:	7bbb      	ldrb	r3, [r7, #14]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d02a      	beq.n	8000a0e <SPI_EV_Handling+0x114>
	{
		if(temp3)
 80009b8:	7b7b      	ldrb	r3, [r7, #13]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d016      	beq.n	80009ec <SPI_EV_Handling+0xf2>
		{
			*((uint16_t*)pvHandle->pRxBuffer) = pvHandle->pSPIx->SPI_DR ;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	68da      	ldr	r2, [r3, #12]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	691b      	ldr	r3, [r3, #16]
 80009c8:	b292      	uxth	r2, r2
 80009ca:	801a      	strh	r2, [r3, #0]
			(uint16_t*)pvHandle->pRxBuffer++;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	1c5a      	adds	r2, r3, #1
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	611a      	str	r2, [r3, #16]
			pvHandle->RxLen--;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	1e5a      	subs	r2, r3, #1
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	619a      	str	r2, [r3, #24]
			pvHandle->RxLen--;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	1e5a      	subs	r2, r3, #1
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	619a      	str	r2, [r3, #24]
 80009ea:	e010      	b.n	8000a0e <SPI_EV_Handling+0x114>
		}
		else
		{
			*pvHandle->pRxBuffer = pvHandle->pSPIx->SPI_DR ;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	68da      	ldr	r2, [r3, #12]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	691b      	ldr	r3, [r3, #16]
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	701a      	strb	r2, [r3, #0]
			pvHandle->pRxBuffer++;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	691b      	ldr	r3, [r3, #16]
 80009fe:	1c5a      	adds	r2, r3, #1
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	611a      	str	r2, [r3, #16]
			pvHandle->RxLen--;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	1e5a      	subs	r2, r3, #1
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	619a      	str	r2, [r3, #24]
		}
	}

	// check ERRIE
	temp1 = (pvHandle->pSPIx->SPI_SR & ( 1 << SPI_SR_OVR ));
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a1a:	73fb      	strb	r3, [r7, #15]
	temp2 = (pvHandle->pSPIx->SPI_CR2 & ( 1 << SPI_CR2_ERRIE ));
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	f003 0320 	and.w	r3, r3, #32
 8000a28:	73bb      	strb	r3, [r7, #14]
	if( temp1 && temp2 )
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d004      	beq.n	8000a3a <SPI_EV_Handling+0x140>
 8000a30:	7bbb      	ldrb	r3, [r7, #14]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SPI_EV_Handling+0x140>
	{
		//let the update the application
		while(1);
 8000a36:	bf00      	nop
 8000a38:	e7fd      	b.n	8000a36 <SPI_EV_Handling+0x13c>
	}

	//close the TXE SPI
	if( pvHandle->TxLen == 0 )
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d102      	bne.n	8000a48 <SPI_EV_Handling+0x14e>
	{
		SPI_TXEIE_Close(pvHandle);
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f000 f81a 	bl	8000a7c <SPI_TXEIE_Close>
	}

	//close the RXNE SPI
	if( pvHandle->RxLen == 0 )
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d102      	bne.n	8000a56 <SPI_EV_Handling+0x15c>
	{
		SPI_RXNEIE_Close(pvHandle);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f83d 	bl	8000ad0 <SPI_RXNEIE_Close>
	}
}
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <SPI_Close>:
void SPI_Close(SPI_RegDef_t * pvSPIx)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
	pvSPIx->SPI_CR1 &= ~( 1 << SPI_CR1_SPE );
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	601a      	str	r2, [r3, #0]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <SPI_TXEIE_Close>:
void SPI_TXEIE_Close(SPI_Handle_t * pvSPIHandle)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	pvSPIHandle->pSPIx->SPI_CR2 &= ~( 1 << SPI_CR2_TXEIE );
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	685a      	ldr	r2, [r3, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000a92:	605a      	str	r2, [r3, #4]
	pvSPIHandle->pSPIx->SPI_CR2 &= ~( 1 << SPI_CR2_ERRIE );
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	685a      	ldr	r2, [r3, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f022 0220 	bic.w	r2, r2, #32
 8000aa2:	605a      	str	r2, [r3, #4]
	pvSPIHandle->pSPIx->SPI_CR1 &= ~( 1 << SPI_CR1_SPE );
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000ab2:	601a      	str	r2, [r3, #0]
	pvSPIHandle->TxLen = 0;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
	pvSPIHandle->pTxBuffer = '\0';
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
	pvSPIHandle->TxRxState = SPI_READY;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	771a      	strb	r2, [r3, #28]
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <SPI_RXNEIE_Close>:
void SPI_RXNEIE_Close(SPI_Handle_t * pvSPIHandle)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	pvSPIHandle->pSPIx->SPI_CR2 &= ~( 1 << SPI_CR2_RXNEIE );
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000ae6:	605a      	str	r2, [r3, #4]
	pvSPIHandle->pSPIx->SPI_CR2 &= ~( 1 << SPI_CR2_ERRIE );
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f022 0220 	bic.w	r2, r2, #32
 8000af6:	605a      	str	r2, [r3, #4]
	pvSPIHandle->pSPIx->SPI_CR1 &= ~( 1 << SPI_CR1_SPE );
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b06:	601a      	str	r2, [r3, #0]
	pvSPIHandle->RxLen = 0;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
	pvSPIHandle->pRxBuffer = '\0';
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
	pvSPIHandle->TxRxState = SPI_READY;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	771a      	strb	r2, [r3, #28]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <SPI_PeriClkCtrl>:
void SPI_PeriClkCtrl(SPI_RegDef_t * pvSPIx,uint8_t EnDis)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	70fb      	strb	r3, [r7, #3]
	if(EnDis == ENABLE)
 8000b30:	78fb      	ldrb	r3, [r7, #3]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d120      	bne.n	8000b78 <SPI_PeriClkCtrl+0x54>
	{
		if( pvSPIx == SPI1 )
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a22      	ldr	r2, [pc, #136]	@ (8000bc4 <SPI_PeriClkCtrl+0xa0>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d106      	bne.n	8000b4c <SPI_PeriClkCtrl+0x28>
		{
			SPI1_PCLK_EN();
 8000b3e:	4b22      	ldr	r3, [pc, #136]	@ (8000bc8 <SPI_PeriClkCtrl+0xa4>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	4a21      	ldr	r2, [pc, #132]	@ (8000bc8 <SPI_PeriClkCtrl+0xa4>)
 8000b44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b48:	6453      	str	r3, [r2, #68]	@ 0x44
		else if( pvSPIx == SPI3 )
		{
			SPI3_PCLK_DI();
		}
	}
}
 8000b4a:	e035      	b.n	8000bb8 <SPI_PeriClkCtrl+0x94>
		else if( pvSPIx == SPI2 )
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000bcc <SPI_PeriClkCtrl+0xa8>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d106      	bne.n	8000b62 <SPI_PeriClkCtrl+0x3e>
			SPI2_PCLK_EN();
 8000b54:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc8 <SPI_PeriClkCtrl+0xa4>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc8 <SPI_PeriClkCtrl+0xa4>)
 8000b5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b5e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b60:	e02a      	b.n	8000bb8 <SPI_PeriClkCtrl+0x94>
		else if( pvSPIx == SPI3 )
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a1a      	ldr	r2, [pc, #104]	@ (8000bd0 <SPI_PeriClkCtrl+0xac>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d126      	bne.n	8000bb8 <SPI_PeriClkCtrl+0x94>
			SPI3_PCLK_EN();
 8000b6a:	4b17      	ldr	r3, [pc, #92]	@ (8000bc8 <SPI_PeriClkCtrl+0xa4>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	4a16      	ldr	r2, [pc, #88]	@ (8000bc8 <SPI_PeriClkCtrl+0xa4>)
 8000b70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b74:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b76:	e01f      	b.n	8000bb8 <SPI_PeriClkCtrl+0x94>
		if( pvSPIx == SPI1 )
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a12      	ldr	r2, [pc, #72]	@ (8000bc4 <SPI_PeriClkCtrl+0xa0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d106      	bne.n	8000b8e <SPI_PeriClkCtrl+0x6a>
			SPI1_PCLK_DI();
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <SPI_PeriClkCtrl+0xa4>)
 8000b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b84:	4a10      	ldr	r2, [pc, #64]	@ (8000bc8 <SPI_PeriClkCtrl+0xa4>)
 8000b86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b8a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000b8c:	e014      	b.n	8000bb8 <SPI_PeriClkCtrl+0x94>
		else if( pvSPIx == SPI2 )
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a0e      	ldr	r2, [pc, #56]	@ (8000bcc <SPI_PeriClkCtrl+0xa8>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d106      	bne.n	8000ba4 <SPI_PeriClkCtrl+0x80>
			SPI2_PCLK_DI();
 8000b96:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <SPI_PeriClkCtrl+0xa4>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc8 <SPI_PeriClkCtrl+0xa4>)
 8000b9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000ba0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ba2:	e009      	b.n	8000bb8 <SPI_PeriClkCtrl+0x94>
		else if( pvSPIx == SPI3 )
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <SPI_PeriClkCtrl+0xac>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d105      	bne.n	8000bb8 <SPI_PeriClkCtrl+0x94>
			SPI3_PCLK_DI();
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <SPI_PeriClkCtrl+0xa4>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb0:	4a05      	ldr	r2, [pc, #20]	@ (8000bc8 <SPI_PeriClkCtrl+0xa4>)
 8000bb2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000bb6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40013000 	.word	0x40013000
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40003800 	.word	0x40003800
 8000bd0:	40003c00 	.word	0x40003c00
