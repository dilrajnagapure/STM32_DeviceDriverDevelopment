/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include "stm32f4xx.h"
#include "stm32f4xx_gpio_driver.h"
#include "stm32f4xx_i2c_driver.h"
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
extern void initialise_monitor_handles(void);
uint8_t toggle = 0;
void button_interrupt_program();
void led_blinking();
void button_read_polling();
void i2c_write(void);
int main(void)
{
//	initialise_monitor_handles();
//	printf("Hello Dilraj\n");
//
//	GPIO_Handle_t I2CPins;
//	I2CPins.pvGPIOx = GPIOB;
//	I2CPins.GPIO_PinConfg.pinMode = GPIO_ALT_FUNC;
//	I2CPins.GPIO_PinConfg.pinOPType = GPIO_OPENDRAIN;
//	I2CPins.GPIO_PinConfg.pinPuPd = GPIO_PULL_UP;
//	I2CPins.GPIO_PinConfg.pinSpeed = GPIO_HIGH_SPEED;
//	I2CPins.GPIO_PinConfg.pinAltFunMode = 4;
//
//	//scl
//	I2CPins.GPIO_PinConfg.pinNumber = PIN_NUMBER_6;
//	GPIO_Init(&I2CPins);
//
//	//sda
//	I2CPins.GPIO_PinConfg.pinNumber = PIN_NUMBER_9;
//	GPIO_Init(&I2CPins);
//
//	GPIO_PeriClkCtrl(GPIOB,ENABLE);
//
//	I2C_handle i2c1;
//	uint8_t buffer[2]={'A','B'};
//	i2c1.pvI2Cx = I2C1;
//	i2c1.I2C_Cfg.I2C_FM_mode_dutyCycle = I2C_FM_DUTY_2;
//	i2c1.I2C_Cfg.I2C_scl_speed = I2C_SPEED_SM;
//	i2c1.I2C_Cfg.I2C_device_address = 0x61;
//	i2c1.I2C_Cfg.I2C_AckControl = I2C_ACK_ENABLE;
//
//	//peripheral enable
//	i2c1.pvI2Cx->I2C_CR1 |= (1<<0);
//
//	I2C_Init(&i2c1);
//
//	I2C_MasterSendData(&i2c1, buffer, 2, 0x50);

	led_blinking();

	while(1)
	{;
	}
}
void i2c_write(void)
{
	I2C_handle i2c1;
	uint8_t buffer[2]={'A','B'};
	i2c1.pvI2Cx = I2C1;
	i2c1.I2C_Cfg.I2C_FM_mode_dutyCycle = I2C_FM_DUTY_2;
	//i2c1.I2C_Cfg.i2c_mode = STANDARD;
	//i2c1.I2C_Cfg.pclk_freq = I2C_SPEED_SM;
	//i2c1.I2C_Cfg.slave_address = 0x50;

	I2C_PeriClkCtrl(i2c1.pvI2Cx,SET);
	I2C_Init(&i2c1);
	I2C_MasterSendData(&i2c1,buffer, 2,0x50);
}
void button_read_polling()
{
		GPIO_Handle_t led,button;
		led.pvGPIOx = GPIOA;
		led.GPIO_PinConfg.pinMode = GPIO_OUTPUT;
		led.GPIO_PinConfg.pinOPType = GPIO_PUSHPULL;
		led.GPIO_PinConfg.pinPuPd = GPIO_NO_PUPD;
		led.GPIO_PinConfg.pinSpeed = GPIO_HIGH_SPEED;
		led.GPIO_PinConfg.pinAltFunMode = 0;
		led.GPIO_PinConfg.pinNumber = PIN_NUMBER_5;

		button.pvGPIOx = GPIOC;
		button.GPIO_PinConfg.pinMode = GPIO_INPUT;
		button.GPIO_PinConfg.pinPuPd = GPIO_PULL_UP;
		button.GPIO_PinConfg.pinNumber = PIN_NUMBER_13;

		GPIO_PeriClkCtrl(GPIOA,ENABLE);
		GPIO_Init(&led);

		GPIO_PeriClkCtrl(GPIOC,ENABLE);
		GPIO_Init(&button);

		while(1)
		{
			if(GPIO_PinRead(GPIOC,PIN_NUMBER_13))
			{
				GPIO_PinWrite(led.pvGPIOx,PIN_NUMBER_5,ENABLE);
				for(uint32_t i=0;i<100000;i++);
			}
			else
			{
				GPIO_PinWrite(led.pvGPIOx,PIN_NUMBER_5,DISABLE);
				for(uint32_t i=0;i<100000;i++);
			}
		}
}
void led_blinking()
{
	GPIO_Handle_t led;
	led.pvGPIOx = GPIOA;
	led.GPIO_PinConfg.pinMode = GPIO_OUTPUT;
	led.GPIO_PinConfg.pinOPType = GPIO_PUSHPULL;
	led.GPIO_PinConfg.pinPuPd = GPIO_NO_PUPD;
	led.GPIO_PinConfg.pinSpeed = GPIO_HIGH_SPEED;
	led.GPIO_PinConfg.pinAltFunMode = 0;
	led.GPIO_PinConfg.pinNumber = PIN_NUMBER_5;

	GPIO_PeriClkCtrl(GPIOA,ENABLE);
	GPIO_Init(&led);

	while(1)
	{
		GPIO_PinWrite(led.pvGPIOx,PIN_NUMBER_5,ENABLE);
		for(uint32_t i=0;i<100000;i++);

		GPIO_PinWrite(led.pvGPIOx,PIN_NUMBER_5,DISABLE);
		for(uint32_t i=0;i<100000;i++);

	}
}
void button_interrupt_program()
{
	GPIO_Handle_t led,button;
	led.pvGPIOx = GPIOA;
	led.GPIO_PinConfg.pinMode = GPIO_OUTPUT;
	led.GPIO_PinConfg.pinOPType = GPIO_PUSHPULL;
	led.GPIO_PinConfg.pinPuPd = GPIO_NO_PUPD;
	led.GPIO_PinConfg.pinSpeed = GPIO_HIGH_SPEED;
	led.GPIO_PinConfg.pinAltFunMode = 0;
	led.GPIO_PinConfg.pinNumber = PIN_NUMBER_5;

	button.pvGPIOx = GPIOC;
	button.GPIO_PinConfg.pinMode = GPIO_EXTI_FT;
	button.GPIO_PinConfg.pinPuPd = GPIO_PULL_UP;
	button.GPIO_PinConfg.pinNumber = PIN_NUMBER_13;

	GPIO_PeriClkCtrl(GPIOA,ENABLE);
	GPIO_Init(&led);

	GPIO_PeriClkCtrl(GPIOC,ENABLE);
	GPIO_Init(&button);

	GPIO_IRQInterruptConfig(IRQ_NO_EXTI15_10, SET);
	GPIO_IRQPriorityConfig(15);
	while(1)
	{
		if(toggle)
		{
			GPIO_PinWrite(led.pvGPIOx,PIN_NUMBER_5,ENABLE);
		}
		else
		{
			GPIO_PinWrite(led.pvGPIOx,PIN_NUMBER_5,DISABLE);
		}
	}
}
void EXTI15_10_IRQHandler(void)
{
	toggle ^= 1;
	//provide pin number to clear pend register
	GPIO_IRQHandler(PIN_NUMBER_13);
}
