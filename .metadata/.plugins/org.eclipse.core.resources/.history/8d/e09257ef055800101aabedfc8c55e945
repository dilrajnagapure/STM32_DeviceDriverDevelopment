/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include "stm32f4xx.h"
#include "stm32f4xx_gpio_driver.h"
#include "stm32f4xx_i2c_driver.h"
#include "stm32f4xx_spi_driver.h"
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
extern void initialise_monitor_handles(void);
uint8_t toggle = 0;
void button_interrupt_program();
void led_blinking();
void button_read_polling();
void spi_write_read_polling(void);
void PMODSF_Write_EnDi(SPI_RegDef_t * pvSPIx, uint8_t EnDis);
//void i2c_write_read_interrupt(void);
int main(void)
{
	//initialise_monitor_handles();
	//printf("Hello Dilraj\n");

	spi_write_read_polling();

	//led_blinking();

	while(1)
	{;
	}
}

SPI_Handle_t spi1;
uint8_t Txbuffer[]={'X','Y','Z'},Rxbuffer[]={0x0,0x0,0,0,0,0};
void spi_write_read_polling(void)
{
	GPIO_Handle_t SPIPins;
	SPIPins.pvGPIOx = GPIOA;
	SPIPins.GPIO_PinConfg.pinMode = GPIO_ALT_FUNC;
	SPIPins.GPIO_PinConfg.pinOPType = GPIO_PUSHPULL;
	SPIPins.GPIO_PinConfg.pinPuPd = GPIO_NO_PUPD;//GPIO_PULL_UP;GPIO_NO_PUPD
	SPIPins.GPIO_PinConfg.pinSpeed = GPIO_MEDIUM_SPEED;//GPIO_HIGH_SPEED;
	SPIPins.GPIO_PinConfg.pinAltFunMode = AF5_SPI_1_to_4;

	//sck
	SPIPins.GPIO_PinConfg.pinNumber = PIN_NUMBER_5;//SCK pin D13
	GPIO_Init(&SPIPins);

	//MOSI
	SPIPins.GPIO_PinConfg.pinNumber = PIN_NUMBER_7;//MOSI pin D11
	GPIO_Init(&SPIPins);

	//MOSI
	SPIPins.GPIO_PinConfg.pinNumber = PIN_NUMBER_6;//MISO pin D12
	GPIO_Init(&SPIPins);

	//CS
	SPIPins.pvGPIOx = GPIOB;

	SPIPins.GPIO_PinConfg.pinNumber = PIN_NUMBER_6;//CS pin D10
	GPIO_Init(&SPIPins);

	//initialize I2C configuration
	spi1.pSPIx = SPI1;
	spi1.SPIConfig.SPI_BusConfig = SPI_FULL_DUPLEX;
	spi1.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
	spi1.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
	spi1.SPIConfig.SPI_DFF = SPI_DFF_8BIT;
	spi1.SPIConfig.SPI_DeviceMode = SPI_MODE_MASTER;
	spi1.SPIConfig.SPI_SSM = SPI_SSM_DISABLE;
	spi1.SPIConfig.SPI_SclkSpeed = SPI_BAUDRATE_FPCLK_2 ;
	spi1.SPIConfig.SPI_SSI = SPI_SSI_EN; //It Ignores the NSS pin value and set as per SSI register when SSM is enabled

	SPI_Init(&spi1);

	// Enable IRQ configuration
	//I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, SET);
	//I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, SET);
	/*
	 * MT25QL256ABA PMODSF Write read sequence
	 * Step	Command	Description
	1	06h	Enable writing
	2	05h	Read Status Register (wait for WEL = 1)
	3	02h + Addr + Data	Page Program
	4	05h	Wait for WIP = 0
	5	04h (optional)	Disable writing
	 */
	//SPI_MasterSendData(spi1.pSPIx,Txbuffer,3);
	PMODSF_Write_EnDi( spi1.pSPIx, SET);
	for(uint32_t i=0;i<1000;i++);
}
void PMODSF_Write_EnDi(SPI_RegDef_t * pvSPIx, uint8_t EnDis)
{
	uint8_t command = 0x0, response = 0x0;
	if( EnDis == SET )
	{
		command = 0x06;
		SPI_MasterSendData(pvSPIx, &command, 1);
		while( response != 0x5 )
		{
			SPI_MasterReceiveData( pvSPIx, &response, 1 );
		}
	}
	else
	{
		command = 0x04;
		SPI_MasterSendData(pvSPIx, &command, 1);
	}
}
void led_blinking()
{
	GPIO_Handle_t led;
	led.pvGPIOx = GPIOA;
	led.GPIO_PinConfg.pinMode = GPIO_OUTPUT;
	led.GPIO_PinConfg.pinOPType = GPIO_PUSHPULL;
	led.GPIO_PinConfg.pinPuPd = GPIO_NO_PUPD;
	led.GPIO_PinConfg.pinSpeed = GPIO_HIGH_SPEED;
	led.GPIO_PinConfg.pinAltFunMode = 0;
	led.GPIO_PinConfg.pinNumber = PIN_NUMBER_5;

	GPIO_PeriClkCtrl(GPIOA,ENABLE);
	GPIO_Init(&led);

	while(1)
	{
		GPIO_PinWrite(led.pvGPIOx,PIN_NUMBER_5,ENABLE);
		for(uint32_t i=0;i<100000;i++);

		GPIO_PinWrite(led.pvGPIOx,PIN_NUMBER_5,DISABLE);
		for(uint32_t i=0;i<100000;i++);

	}
}
